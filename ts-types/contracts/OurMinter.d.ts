/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OurMinterInterface extends ethers.utils.Interface {
  functions: {
    "_mirrorAH()": FunctionFragment;
    "_mirrorCrowdfund()": FunctionFragment;
    "_mirrorEditions()": FunctionFragment;
    "_partyBid()": FunctionFragment;
    "_weth()": FunctionFragment;
    "_zoraAH()": FunctionFragment;
    "_zoraMarket()": FunctionFragment;
    "_zoraMedia()": FunctionFragment;
    "acceptZoraMarketBid(uint256,tuple)": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "buyMirrorEdition(uint256)": FunctionFragment;
    "cancelZoraAuction(uint256)": FunctionFragment;
    "createMirrorAuction(uint256,uint256,uint256,address,address)": FunctionFragment;
    "createMirrorBid(uint256)": FunctionFragment;
    "createMirrorCrowdfund(string,string,address,address,uint256,uint256)": FunctionFragment;
    "createMirrorEdition(uint256,uint256,address)": FunctionFragment;
    "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)": FunctionFragment;
    "createZoraAuctionBid(uint256,uint256)": FunctionFragment;
    "endMirrorAuction(uint256)": FunctionFragment;
    "endZoraAuction(uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "mintToAuctionForETH(tuple,tuple,uint256,uint256)": FunctionFragment;
    "mintZora(tuple,tuple)": FunctionFragment;
    "mintZoraWithSig(address,tuple,tuple,tuple)": FunctionFragment;
    "removeOwner(address,address)": FunctionFragment;
    "removeZoraMarketAsk(uint256)": FunctionFragment;
    "removeZoraMarketBid(uint256,address)": FunctionFragment;
    "setZoraAuctionApproval(uint256,bool)": FunctionFragment;
    "setZoraAuctionReservePrice(uint256,uint256)": FunctionFragment;
    "setZoraMarketAsk(uint256,tuple)": FunctionFragment;
    "setZoraMarketBid(uint256,tuple,address)": FunctionFragment;
    "setZoraMarketBidShares(uint256,tuple)": FunctionFragment;
    "startSplitParty(address,address,uint256,uint256,string,string)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
    "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)": FunctionFragment;
    "untrustedBurn721(address,uint256)": FunctionFragment;
    "untrustedCloseCrowdFunding(address)": FunctionFragment;
    "untrustedSafeTransfer721(address,address,uint256)": FunctionFragment;
    "untrustedSetApproval721(address,address,bool)": FunctionFragment;
    "updateMirrorMinBid(uint256)": FunctionFragment;
    "updateZoraMediaMetadataURI(uint256,string)": FunctionFragment;
    "updateZoraMediaTokenURI(uint256,string)": FunctionFragment;
    "updateZoraMediaURIs(uint256,string,string)": FunctionFragment;
    "withdrawEditionFunds(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_mirrorAH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_mirrorCrowdfund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_mirrorEditions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_partyBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "_weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "_zoraAH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_zoraMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_zoraMedia",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptZoraMarketBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyMirrorEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelZoraAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMirrorAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createMirrorBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMirrorCrowdfund",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMirrorEdition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createZoraAuction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createZoraAuctionBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endMirrorAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endZoraAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintToAuctionForETH",
    values: [
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintZora",
    values: [
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintZoraWithSig",
    values: [
      string,
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeZoraMarketAsk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeZoraMarketBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraAuctionApproval",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraAuctionReservePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraMarketAsk",
    values: [BigNumberish, { amount: BigNumberish; currency: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraMarketBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setZoraMarketBidShares",
    values: [
      BigNumberish,
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startSplitParty",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeCreateZoraAuction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "untrustedBurn721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "untrustedCloseCrowdFunding",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "untrustedSafeTransfer721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "untrustedSetApproval721",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMirrorMinBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZoraMediaMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZoraMediaTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateZoraMediaURIs",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEditionFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_mirrorAH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_mirrorCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mirrorEditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_partyBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_zoraAH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_zoraMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_zoraMedia", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptZoraMarketBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyMirrorEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelZoraAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMirrorAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMirrorBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMirrorCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMirrorEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZoraAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createZoraAuctionBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endMirrorAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endZoraAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintToAuctionForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintZora", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintZoraWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeZoraMarketAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeZoraMarketBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZoraAuctionApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZoraAuctionReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZoraMarketAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZoraMarketBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZoraMarketBidShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSplitParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeCreateZoraAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "untrustedBurn721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "untrustedCloseCrowdFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "untrustedSafeTransfer721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "untrustedSetApproval721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMirrorMinBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZoraMediaMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZoraMediaTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateZoraMediaURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEditionFunds",
    data: BytesLike
  ): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ProxySetup(address,address[])": EventFragment;
    "RemovedOwner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxySetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
}

export class OurMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OurMinterInterface;

  functions: {
    _mirrorAH(overrides?: CallOverrides): Promise<[string]>;

    "_mirrorAH()"(overrides?: CallOverrides): Promise<[string]>;

    _mirrorCrowdfund(overrides?: CallOverrides): Promise<[string]>;

    "_mirrorCrowdfund()"(overrides?: CallOverrides): Promise<[string]>;

    _mirrorEditions(overrides?: CallOverrides): Promise<[string]>;

    "_mirrorEditions()"(overrides?: CallOverrides): Promise<[string]>;

    _partyBid(overrides?: CallOverrides): Promise<[string]>;

    "_partyBid()"(overrides?: CallOverrides): Promise<[string]>;

    _weth(overrides?: CallOverrides): Promise<[string]>;

    "_weth()"(overrides?: CallOverrides): Promise<[string]>;

    _zoraAH(overrides?: CallOverrides): Promise<[string]>;

    "_zoraAH()"(overrides?: CallOverrides): Promise<[string]>;

    _zoraMarket(overrides?: CallOverrides): Promise<[string]>;

    "_zoraMarket()"(overrides?: CallOverrides): Promise<[string]>;

    _zoraMedia(overrides?: CallOverrides): Promise<[string]>;

    "_zoraMedia()"(overrides?: CallOverrides): Promise<[string]>;

    acceptZoraMarketBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptZoraMarketBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyMirrorEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyMirrorEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancelZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createMirrorAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createMirrorAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createMirrorBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createMirrorBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createMirrorCrowdfund(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createMirrorCrowdfund(string,string,address,address,uint256,uint256)"(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createMirrorEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createMirrorEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createZoraAuctionBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createZoraAuctionBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    endMirrorAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endMirrorAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    "getOwners()"(overrides?: CallOverrides): Promise<[string[]]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintToAuctionForETH(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintToAuctionForETH(tuple,tuple,uint256,uint256)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintZora(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintZora(tuple,tuple)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintZoraWithSig(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintZoraWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeOwner(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOwner(address,address)"(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeZoraMarketAsk(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeZoraMarketAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeZoraMarketBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeZoraMarketBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZoraAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZoraAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZoraAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZoraAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZoraMarketAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZoraMarketAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZoraMarketBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZoraMarketBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setZoraMarketBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setZoraMarketBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startSplitParty(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startSplitParty(address,address,uint256,uint256,string,string)"(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsafeCreateZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    untrustedBurn721(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "untrustedBurn721(address,uint256)"(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    untrustedCloseCrowdFunding(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "untrustedCloseCrowdFunding(address)"(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    untrustedSafeTransfer721(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "untrustedSafeTransfer721(address,address,uint256)"(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    untrustedSetApproval721(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "untrustedSetApproval721(address,address,bool)"(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMirrorMinBid(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMirrorMinBid(uint256)"(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateZoraMediaMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateZoraMediaMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateZoraMediaTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateZoraMediaTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateZoraMediaURIs(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateZoraMediaURIs(uint256,string,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawEditionFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawEditionFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _mirrorAH(overrides?: CallOverrides): Promise<string>;

  "_mirrorAH()"(overrides?: CallOverrides): Promise<string>;

  _mirrorCrowdfund(overrides?: CallOverrides): Promise<string>;

  "_mirrorCrowdfund()"(overrides?: CallOverrides): Promise<string>;

  _mirrorEditions(overrides?: CallOverrides): Promise<string>;

  "_mirrorEditions()"(overrides?: CallOverrides): Promise<string>;

  _partyBid(overrides?: CallOverrides): Promise<string>;

  "_partyBid()"(overrides?: CallOverrides): Promise<string>;

  _weth(overrides?: CallOverrides): Promise<string>;

  "_weth()"(overrides?: CallOverrides): Promise<string>;

  _zoraAH(overrides?: CallOverrides): Promise<string>;

  "_zoraAH()"(overrides?: CallOverrides): Promise<string>;

  _zoraMarket(overrides?: CallOverrides): Promise<string>;

  "_zoraMarket()"(overrides?: CallOverrides): Promise<string>;

  _zoraMedia(overrides?: CallOverrides): Promise<string>;

  "_zoraMedia()"(overrides?: CallOverrides): Promise<string>;

  acceptZoraMarketBid(
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptZoraMarketBid(uint256,tuple)"(
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addOwner(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyMirrorEdition(
    editionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyMirrorEdition(uint256)"(
    editionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancelZoraAuction(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelZoraAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createMirrorAuction(
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    creator: string,
    creatorShareRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createMirrorAuction(uint256,uint256,uint256,address,address)"(
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    creator: string,
    creatorShareRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createMirrorBid(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createMirrorBid(uint256)"(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createMirrorCrowdfund(
    name: string,
    symbol: string,
    operator: string,
    fundingRecipient: string,
    fundingCap: BigNumberish,
    operatorPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createMirrorCrowdfund(string,string,address,address,uint256,uint256)"(
    name: string,
    symbol: string,
    operator: string,
    fundingRecipient: string,
    fundingCap: BigNumberish,
    operatorPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createMirrorEdition(
    quantity: BigNumberish,
    price: BigNumberish,
    fundingRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createMirrorEdition(uint256,uint256,address)"(
    quantity: BigNumberish,
    price: BigNumberish,
    fundingRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createZoraAuction(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createZoraAuctionBid(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createZoraAuctionBid(uint256,uint256)"(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  endMirrorAuction(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endMirrorAuction(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endZoraAuction(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endZoraAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintToAuctionForETH(
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    duration: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintToAuctionForETH(tuple,tuple,uint256,uint256)"(
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    duration: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintZora(
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintZora(tuple,tuple)"(
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintZoraWithSig(
    creator: string,
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintZoraWithSig(address,tuple,tuple,tuple)"(
    creator: string,
    mediaData: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeOwner(
    prevOwner: string,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOwner(address,address)"(
    prevOwner: string,
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeZoraMarketAsk(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeZoraMarketAsk(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeZoraMarketBid(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeZoraMarketBid(uint256,address)"(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZoraAuctionApproval(
    auctionId: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZoraAuctionApproval(uint256,bool)"(
    auctionId: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZoraAuctionReservePrice(
    auctionId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZoraAuctionReservePrice(uint256,uint256)"(
    auctionId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZoraMarketAsk(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZoraMarketAsk(uint256,tuple)"(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZoraMarketBid(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZoraMarketBid(uint256,tuple,address)"(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setZoraMarketBidShares(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setZoraMarketBidShares(uint256,tuple)"(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startSplitParty(
    marketWrapper: string,
    nftContract: string,
    tokenId: BigNumberish,
    auctionId: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startSplitParty(address,address,uint256,uint256,string,string)"(
    marketWrapper: string,
    nftContract: string,
    tokenId: BigNumberish,
    auctionId: BigNumberish,
    name: string,
    symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOwner(address,address,address)"(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsafeCreateZoraAuction(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  untrustedBurn721(
    tokenContract_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "untrustedBurn721(address,uint256)"(
    tokenContract_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  untrustedCloseCrowdFunding(
    crowdfundProxy_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "untrustedCloseCrowdFunding(address)"(
    crowdfundProxy_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  untrustedSafeTransfer721(
    tokenContract_: string,
    newOwner_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "untrustedSafeTransfer721(address,address,uint256)"(
    tokenContract_: string,
    newOwner_: string,
    tokenId_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  untrustedSetApproval721(
    tokenContract_: string,
    operator_: string,
    approved_: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "untrustedSetApproval721(address,address,bool)"(
    tokenContract_: string,
    operator_: string,
    approved_: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMirrorMinBid(
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMirrorMinBid(uint256)"(
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateZoraMediaMetadataURI(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateZoraMediaMetadataURI(uint256,string)"(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateZoraMediaTokenURI(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateZoraMediaTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateZoraMediaURIs(
    tokenId: BigNumberish,
    tokenURI: string,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateZoraMediaURIs(uint256,string,string)"(
    tokenId: BigNumberish,
    tokenURI: string,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawEditionFunds(
    editionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawEditionFunds(uint256)"(
    editionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _mirrorAH(overrides?: CallOverrides): Promise<string>;

    "_mirrorAH()"(overrides?: CallOverrides): Promise<string>;

    _mirrorCrowdfund(overrides?: CallOverrides): Promise<string>;

    "_mirrorCrowdfund()"(overrides?: CallOverrides): Promise<string>;

    _mirrorEditions(overrides?: CallOverrides): Promise<string>;

    "_mirrorEditions()"(overrides?: CallOverrides): Promise<string>;

    _partyBid(overrides?: CallOverrides): Promise<string>;

    "_partyBid()"(overrides?: CallOverrides): Promise<string>;

    _weth(overrides?: CallOverrides): Promise<string>;

    "_weth()"(overrides?: CallOverrides): Promise<string>;

    _zoraAH(overrides?: CallOverrides): Promise<string>;

    "_zoraAH()"(overrides?: CallOverrides): Promise<string>;

    _zoraMarket(overrides?: CallOverrides): Promise<string>;

    "_zoraMarket()"(overrides?: CallOverrides): Promise<string>;

    _zoraMedia(overrides?: CallOverrides): Promise<string>;

    "_zoraMedia()"(overrides?: CallOverrides): Promise<string>;

    acceptZoraMarketBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptZoraMarketBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    "addOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyMirrorEdition(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyMirrorEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelZoraAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMirrorAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMirrorAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createMirrorBid(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMirrorBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMirrorCrowdfund(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMirrorCrowdfund(string,string,address,address,uint256,uint256)"(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMirrorEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMirrorEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createZoraAuctionBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createZoraAuctionBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endMirrorAuction(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "endMirrorAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endZoraAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "endZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintToAuctionForETH(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintToAuctionForETH(tuple,tuple,uint256,uint256)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintZora(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintZora(tuple,tuple)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintZoraWithSig(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintZoraWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    removeOwner(
      prevOwner: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOwner(address,address)"(
      prevOwner: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeZoraMarketAsk(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeZoraMarketAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeZoraMarketBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeZoraMarketBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setZoraAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setZoraAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setZoraAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setZoraAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setZoraMarketAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "setZoraMarketAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setZoraMarketBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setZoraMarketBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setZoraMarketBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setZoraMarketBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    startSplitParty(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "startSplitParty(address,address,uint256,uint256,string,string)"(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsafeCreateZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    untrustedBurn721(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "untrustedBurn721(address,uint256)"(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    untrustedCloseCrowdFunding(
      crowdfundProxy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "untrustedCloseCrowdFunding(address)"(
      crowdfundProxy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    untrustedSafeTransfer721(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "untrustedSafeTransfer721(address,address,uint256)"(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    untrustedSetApproval721(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "untrustedSetApproval721(address,address,bool)"(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMirrorMinBid(
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMirrorMinBid(uint256)"(
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZoraMediaMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateZoraMediaMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZoraMediaTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateZoraMediaTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateZoraMediaURIs(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateZoraMediaURIs(uint256,string,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEditionFunds(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEditionFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddedOwner(owner: null): EventFilter;

    ProxySetup(initiator: string | null, owners: null): EventFilter;

    RemovedOwner(owner: null): EventFilter;
  };

  estimateGas: {
    _mirrorAH(overrides?: CallOverrides): Promise<BigNumber>;

    "_mirrorAH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _mirrorCrowdfund(overrides?: CallOverrides): Promise<BigNumber>;

    "_mirrorCrowdfund()"(overrides?: CallOverrides): Promise<BigNumber>;

    _mirrorEditions(overrides?: CallOverrides): Promise<BigNumber>;

    "_mirrorEditions()"(overrides?: CallOverrides): Promise<BigNumber>;

    _partyBid(overrides?: CallOverrides): Promise<BigNumber>;

    "_partyBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    _weth(overrides?: CallOverrides): Promise<BigNumber>;

    "_weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    _zoraAH(overrides?: CallOverrides): Promise<BigNumber>;

    "_zoraAH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _zoraMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "_zoraMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    _zoraMedia(overrides?: CallOverrides): Promise<BigNumber>;

    "_zoraMedia()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptZoraMarketBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptZoraMarketBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    addOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyMirrorEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyMirrorEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancelZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createMirrorAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createMirrorAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createMirrorBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createMirrorBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createMirrorCrowdfund(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createMirrorCrowdfund(string,string,address,address,uint256,uint256)"(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createMirrorEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createMirrorEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createZoraAuctionBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createZoraAuctionBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    endMirrorAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endMirrorAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwners()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintToAuctionForETH(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintToAuctionForETH(tuple,tuple,uint256,uint256)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintZora(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintZora(tuple,tuple)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintZoraWithSig(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintZoraWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOwner(address,address)"(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeZoraMarketAsk(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeZoraMarketAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeZoraMarketBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeZoraMarketBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZoraAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setZoraAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZoraAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setZoraAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZoraMarketAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setZoraMarketAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZoraMarketBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setZoraMarketBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setZoraMarketBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setZoraMarketBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    startSplitParty(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startSplitParty(address,address,uint256,uint256,string,string)"(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsafeCreateZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    untrustedBurn721(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "untrustedBurn721(address,uint256)"(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    untrustedCloseCrowdFunding(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "untrustedCloseCrowdFunding(address)"(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    untrustedSafeTransfer721(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "untrustedSafeTransfer721(address,address,uint256)"(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    untrustedSetApproval721(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "untrustedSetApproval721(address,address,bool)"(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMirrorMinBid(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMirrorMinBid(uint256)"(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateZoraMediaMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateZoraMediaMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateZoraMediaTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateZoraMediaTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateZoraMediaURIs(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateZoraMediaURIs(uint256,string,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawEditionFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawEditionFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _mirrorAH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_mirrorAH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _mirrorCrowdfund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_mirrorCrowdfund()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _mirrorEditions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_mirrorEditions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _partyBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_partyBid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _zoraAH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_zoraAH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _zoraMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_zoraMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _zoraMedia(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_zoraMedia()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptZoraMarketBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptZoraMarketBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyMirrorEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyMirrorEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancelZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createMirrorAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createMirrorAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createMirrorBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createMirrorBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createMirrorCrowdfund(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createMirrorCrowdfund(string,string,address,address,uint256,uint256)"(
      name: string,
      symbol: string,
      operator: string,
      fundingRecipient: string,
      fundingCap: BigNumberish,
      operatorPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createMirrorEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createMirrorEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createZoraAuctionBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createZoraAuctionBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    endMirrorAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endMirrorAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endZoraAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endZoraAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintToAuctionForETH(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintToAuctionForETH(tuple,tuple,uint256,uint256)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      duration: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintZora(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintZora(tuple,tuple)"(
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintZoraWithSig(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintZoraWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      mediaData: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOwner(address,address)"(
      prevOwner: string,
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeZoraMarketAsk(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeZoraMarketAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeZoraMarketBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeZoraMarketBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZoraAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZoraAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZoraAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZoraAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZoraMarketAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZoraMarketAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZoraMarketBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZoraMarketBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setZoraMarketBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setZoraMarketBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startSplitParty(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startSplitParty(address,address,uint256,uint256,string,string)"(
      marketWrapper: string,
      nftContract: string,
      tokenId: BigNumberish,
      auctionId: BigNumberish,
      name: string,
      symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsafeCreateZoraAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsafeCreateZoraAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    untrustedBurn721(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "untrustedBurn721(address,uint256)"(
      tokenContract_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    untrustedCloseCrowdFunding(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "untrustedCloseCrowdFunding(address)"(
      crowdfundProxy_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    untrustedSafeTransfer721(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "untrustedSafeTransfer721(address,address,uint256)"(
      tokenContract_: string,
      newOwner_: string,
      tokenId_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    untrustedSetApproval721(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "untrustedSetApproval721(address,address,bool)"(
      tokenContract_: string,
      operator_: string,
      approved_: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMirrorMinBid(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMirrorMinBid(uint256)"(
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateZoraMediaMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateZoraMediaMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateZoraMediaTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateZoraMediaTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateZoraMediaURIs(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateZoraMediaURIs(uint256,string,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawEditionFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawEditionFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
