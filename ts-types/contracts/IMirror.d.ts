/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMirrorInterface extends ethers.utils.Interface {
  functions: {
    "buyEdition(uint256)": FunctionFragment;
    "closeFunding()": FunctionFragment;
    "createAuction(uint256,uint256,uint256,address,address)": FunctionFragment;
    "createBid(uint256)": FunctionFragment;
    "createCrowdfund(string,string,address,address,uint256,uint256)": FunctionFragment;
    "createEdition(uint256,uint256,address)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "updateMinBid(uint256)": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyEdition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCrowdfund",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEdition",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyEdition", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCrowdfund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEdition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMinBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMirror extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMirrorInterface;

  functions: {
    buyEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    closeFunding(overrides?: Overrides): Promise<ContractTransaction>;

    "closeFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createCrowdfund(string,string,address,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    endAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMinBid(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMinBid(uint256)"(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  buyEdition(
    editionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyEdition(uint256)"(
    editionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  closeFunding(overrides?: Overrides): Promise<ContractTransaction>;

  "closeFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

  createAuction(
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    creator: string,
    creatorShareRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAuction(uint256,uint256,uint256,address,address)"(
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    creator: string,
    creatorShareRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createBid(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createBid(uint256)"(
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  createCrowdfund(
    name_: string,
    symbol_: string,
    operator_: string,
    fundingRecipient_: string,
    fundingCap_: BigNumberish,
    operatorPercent_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createCrowdfund(string,string,address,address,uint256,uint256)"(
    name_: string,
    symbol_: string,
    operator_: string,
    fundingRecipient_: string,
    fundingCap_: BigNumberish,
    operatorPercent_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createEdition(
    quantity: BigNumberish,
    price: BigNumberish,
    fundingRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createEdition(uint256,uint256,address)"(
    quantity: BigNumberish,
    price: BigNumberish,
    fundingRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  endAuction(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endAuction(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMinBid(
    _minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMinBid(uint256)"(
    _minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFunds(
    editionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFunds(uint256)"(
    editionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    buyEdition(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeFunding(overrides?: CallOverrides): Promise<void>;

    "closeFunding()"(overrides?: CallOverrides): Promise<void>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "createBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createCrowdfund(string,string,address,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "endAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinBid(
      _minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMinBid(uint256)"(
      _minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    closeFunding(overrides?: Overrides): Promise<BigNumber>;

    "closeFunding()"(overrides?: Overrides): Promise<BigNumber>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createCrowdfund(string,string,address,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    endAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMinBid(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMinBid(uint256)"(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyEdition(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyEdition(uint256)"(
      editionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    closeFunding(overrides?: Overrides): Promise<PopulatedTransaction>;

    "closeFunding()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,uint256,uint256,address,address)"(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      creator: string,
      creatorShareRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createBid(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    createCrowdfund(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createCrowdfund(string,string,address,address,uint256,uint256)"(
      name_: string,
      symbol_: string,
      operator_: string,
      fundingRecipient_: string,
      fundingCap_: BigNumberish,
      operatorPercent_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createEdition(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createEdition(uint256,uint256,address)"(
      quantity: BigNumberish,
      price: BigNumberish,
      fundingRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    endAuction(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endAuction(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMinBid(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMinBid(uint256)"(
      _minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFunds(uint256)"(
      editionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
