/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { IMirror } from "../IMirror";

export class IMirror__factory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMirror {
    return new Contract(address, _abi, signerOrProvider) as IMirror;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "editionId",
        type: "uint256",
      },
    ],
    name: "buyEdition",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "closeFunding",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reservePrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "creatorShareRecipient",
        type: "address",
      },
    ],
    name: "createAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "createBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address payable",
        name: "operator_",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "fundingRecipient_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fundingCap_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "operatorPercent_",
        type: "uint256",
      },
    ],
    name: "createCrowdfund",
    outputs: [
      {
        internalType: "address",
        name: "crowdfundProxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "fundingRecipient",
        type: "address",
      },
    ],
    name: "createEdition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "endAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minBid",
        type: "uint256",
      },
    ],
    name: "updateMinBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "editionId",
        type: "uint256",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];
