/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IZoraInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(uint256,tuple)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "createAuction(uint256,address,uint256,uint256,address,uint8,address)": FunctionFragment;
    "createBid(uint256,uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "mint(tuple,tuple)": FunctionFragment;
    "mintWithSig(address,tuple,tuple,tuple)": FunctionFragment;
    "permit(address,uint256,tuple)": FunctionFragment;
    "removeAsk(uint256)": FunctionFragment;
    "removeBid(uint256,address)": FunctionFragment;
    "setAsk(uint256,tuple)": FunctionFragment;
    "setAuctionApproval(uint256,bool)": FunctionFragment;
    "setAuctionReservePrice(uint256,uint256)": FunctionFragment;
    "setBid(uint256,tuple,address)": FunctionFragment;
    "setBidShares(uint256,tuple)": FunctionFragment;
    "updateTokenMetadataURI(uint256,string)": FunctionFragment;
    "updateTokenURI(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSig",
    values: [
      string,
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsk",
    values: [BigNumberish, { amount: BigNumberish; currency: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionApproval",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionReservePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidShares",
    values: [
      BigNumberish,
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAsk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBidShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;

  events: {
    "AskCreated(uint256,tuple)": EventFragment;
    "AskRemoved(uint256,tuple)": EventFragment;
    "AuctionApprovalUpdated(uint256,uint256,address,bool)": EventFragment;
    "AuctionBid(uint256,uint256,address,address,uint256,bool,bool)": EventFragment;
    "AuctionCanceled(uint256,uint256,address,address)": EventFragment;
    "AuctionCreated(uint256,uint256,address,uint256,uint256,address,address,uint8,address)": EventFragment;
    "AuctionDurationExtended(uint256,uint256,address,uint256)": EventFragment;
    "AuctionEnded(uint256,uint256,address,address,address,address,uint256,uint256,address)": EventFragment;
    "AuctionReservePriceUpdated(uint256,uint256,address,uint256)": EventFragment;
    "BidCreated(uint256,tuple)": EventFragment;
    "BidFinalized(uint256,tuple)": EventFragment;
    "BidRemoved(uint256,tuple)": EventFragment;
    "BidShareUpdated(uint256,tuple)": EventFragment;
    "TokenMetadataURIUpdated(uint256,address,string)": EventFragment;
    "TokenURIUpdated(uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AskRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionApprovalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionDurationExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenURIUpdated"): EventFragment;
}

export class IZora extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IZoraInterface;

  functions: {
    acceptBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "endAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(tuple,tuple)"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,uint256,tuple)"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAsk(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBid(uint256,tuple)"(
    tokenId: BigNumberish,
    expectedBid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelAuction(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAuction(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAuction(uint256,address,uint256,uint256,address,uint8,address)"(
    tokenId: BigNumberish,
    tokenContract: string,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    curator: string,
    curatorFeePercentages: BigNumberish,
    auctionCurrency: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createBid(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createBid(uint256,uint256)"(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  endAuction(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "endAuction(uint256)"(
    auctionId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(tuple,tuple)"(
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintWithSig(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintWithSig(address,tuple,tuple,tuple)"(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  permit(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,uint256,tuple)"(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAsk(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAsk(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeBid(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeBid(uint256,address)"(
    tokenId: BigNumberish,
    bidder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAsk(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAsk(uint256,tuple)"(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionApproval(
    auctionId: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionApproval(uint256,bool)"(
    auctionId: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuctionReservePrice(
    auctionId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuctionReservePrice(uint256,uint256)"(
    auctionId: BigNumberish,
    reservePrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBid(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBid(uint256,tuple,address)"(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    spender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBidShares(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBidShares(uint256,tuple)"(
    tokenId: BigNumberish,
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenMetadataURI(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenMetadataURI(uint256,string)"(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenURI(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "endAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(tuple,tuple)"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,uint256,tuple)"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    removeAsk(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "setAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AskCreated(tokenId: BigNumberish | null, ask: null): EventFilter;

    AskRemoved(tokenId: BigNumberish | null, ask: null): EventFilter;

    AuctionApprovalUpdated(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      approved: null
    ): EventFilter;

    AuctionBid(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      sender: null,
      value: null,
      firstBid: null,
      extended: null
    ): EventFilter;

    AuctionCanceled(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      tokenOwner: null
    ): EventFilter;

    AuctionCreated(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      duration: null,
      reservePrice: null,
      tokenOwner: null,
      curator: null,
      curatorFeePercentage: null,
      auctionCurrency: null
    ): EventFilter;

    AuctionDurationExtended(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      duration: null
    ): EventFilter;

    AuctionEnded(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      tokenOwner: null,
      curator: null,
      winner: null,
      amount: null,
      curatorFee: null,
      auctionCurrency: null
    ): EventFilter;

    AuctionReservePriceUpdated(
      auctionId: BigNumberish | null,
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      reservePrice: null
    ): EventFilter;

    BidCreated(tokenId: BigNumberish | null, bid: null): EventFilter;

    BidFinalized(tokenId: BigNumberish | null, bid: null): EventFilter;

    BidRemoved(tokenId: BigNumberish | null, bid: null): EventFilter;

    BidShareUpdated(tokenId: BigNumberish | null, bidShares: null): EventFilter;

    TokenMetadataURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): EventFilter;

    TokenURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): EventFilter;
  };

  estimateGas: {
    acceptBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "endAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(tuple,tuple)"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,uint256,tuple)"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAsk(tokenId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBid(uint256,tuple)"(
      tokenId: BigNumberish,
      expectedBid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAuction(uint256,address,uint256,uint256,address,uint8,address)"(
      tokenId: BigNumberish,
      tokenContract: string,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      curator: string,
      curatorFeePercentages: BigNumberish,
      auctionCurrency: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createBid(uint256,uint256)"(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    endAuction(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "endAuction(uint256)"(
      auctionId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(tuple,tuple)"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintWithSig(address,tuple,tuple,tuple)"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,uint256,tuple)"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAsk(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeBid(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeBid(uint256,address)"(
      tokenId: BigNumberish,
      bidder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAsk(uint256,tuple)"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionApproval(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionApproval(uint256,bool)"(
      auctionId: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuctionReservePrice(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuctionReservePrice(uint256,uint256)"(
      auctionId: BigNumberish,
      reservePrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBid(uint256,tuple,address)"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      spender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBidShares(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBidShares(uint256,tuple)"(
      tokenId: BigNumberish,
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
